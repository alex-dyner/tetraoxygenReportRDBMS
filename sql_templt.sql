
SELECT
     session_id
    ,user_id,category
    ,session_start_ts
    ,lead(session_start_ts) OVER (PARTITION BY user_id,category ORDER BY session_start_ts) - 1 AS session_end_ts
FROM (
    SELECT
         user_id,category
        ,'#' || CAST(user_id AS VARCHAR(2048))||'#' || CAST(category AS VARCHAR(2048)) || "#" || CAST(event_ts as VARCHAR(100)) AS session_id
        ,event_ts AS session_start_ts


SELECT 
    '#' || CAST(user_id AS VARCHAR(2048))||'#' || CAST(category AS VARCHAR(2048)) || "#" || CAST(session_start_ts as VARCHAR(100)) AS session_id
    ,u.*
FROM (
    SELECT 
         user_id
        ,category
        ,session_start_ts,
        ,max(event_ts) as session_end_ts
    FROM (
        SELECT 
            t.*
            ,max(raw_session_start_ts) OVER (PARTITION BY user_id, category ORDER BY event_ts UNBOUNDED PRECEDING AND CURRENT ROW) as session_start_ts
        FROM (
            SELECT 
                r.*
                ,CASE WHEN prev_event_ts IS NULL OR (event_ts - prev_event_ts) > 300 THEN event_ts ELSE NULL END raw_session_start_ts
            FROM (
                SELECT
                    e.*
                    ,lag(event_ts) OVER (PARTITION BY user_id, category ORDER BY event_ts) as prev_event_ts
                FROM (
                    SELECT
                         inpt.*
                        ,unix_timestamp(event_time) as event_ts
                    FROM events inpt
                ) e
            ) r
        ) t
    ) y
    GROUP BY user_id, category, session_start_ts
) u



== Physical Plan ==
*(1) SerializeFromObject [staticinvoke(class org.apache.spark.unsafe.types.UTF8String, StringType, fromString, assertnotnull(input[0, com.bauxite.reporting.domain.EventWithSessionInfo, true]).Category, true, false) AS Category#52, staticinvoke(class org.apache.spark.unsafe.types.UTF8String, StringType, fromString, assertnotnull(input[0, com.bauxite.reporting.domain.EventWithSessionInfo, true]).Product, true, false) AS Product#53, staticinvoke(class org.apache.spark.unsafe.types.UTF8String, StringType, fromString, assertnotnull(input[0, com.bauxite.reporting.domain.EventWithSessionInfo, true]).UserId, true, false) AS UserId#54, staticinvoke(class org.apache.spark.unsafe.types.UTF8String, StringType, fromString, assertnotnull(input[0, com.bauxite.reporting.domain.EventWithSessionInfo, true]).EventTime, true, false) AS EventTime#55, staticinvoke(class org.apache.spark.unsafe.types.UTF8String, StringType, fromString, assertnotnull(input[0, com.bauxite.reporting.domain.EventWithSessionInfo, true]).EventType, true, false) AS EventType#56, staticinvoke(class org.apache.spark.unsafe.types.UTF8String, StringType, fromString, assertnotnull(input[0, com.bauxite.reporting.domain.EventWithSessionInfo, true]).SessionId, true, false) AS SessionId#57, staticinvoke(class org.apache.spark.unsafe.types.UTF8String, StringType, fromString, assertnotnull(input[0, com.bauxite.reporting.domain.EventWithSessionInfo, true]).SessionStartTs, true, false) AS SessionStartTs#58, staticinvoke(class org.apache.spark.unsafe.types.UTF8String, StringType, fromString, assertnotnull(input[0, com.bauxite.reporting.domain.EventWithSessionInfo, true]).SessionEndTs, true, false) AS SessionEndTs#59]
+- MapPartitions org.apache.spark.sql.Dataset$$Lambda$1254/0x0000000800adc040@268e30d4, obj#51: com.bauxite.reporting.domain.EventWithSessionInfo
   +- DeserializeToObject newInstance(class scala.Tuple2), obj#50: scala.Tuple2
      +- ObjectHashAggregate(keys=[_1#36, _2#37], functions=[eventsessionaggregator(com.bauxite.reporting.sessinizer.EventSessionAggregator@3a44993c, Some(newInstance(class com.bauxite.reporting.domain.Event)), Some(class com.bauxite.reporting.domain.Event), Some(StructType(StructField(Category,StringType,true), StructField(Product,StringType,true), StructField(UserId,StringType,true), StructField(EventTime,StringType,true), StructField(EventType,StringType,true))), mapobjects(MapObjects_loopValue0, MapObjects_loopIsNull0, ObjectType(class com.bauxite.reporting.sessinizer.SessionAggregationBufferItem), if (isnull(lambdavariable(MapObjects_loopValue0, MapObjects_loopIsNull0, ObjectType(class com.bauxite.reporting.sessinizer.SessionAggregationBufferItem), true))) null else named_struct(events, mapobjects(MapObjects_loopValue1, MapObjects_loopIsNull1, ObjectType(class com.bauxite.reporting.domain.Event), if (isnull(lambdavariable(MapObjects_loopValue1, MapObjects_loopIsNull1, ObjectType(class com.bauxite.reporting.domain.Event), true))) null else named_struct(Category, staticinvoke(class org.apache.spark.unsafe.types.UTF8String, StringType, fromString, assertnotnull(lambdavariable(MapObjects_loopValue1, MapObjects_loopIsNull1, ObjectType(class com.bauxite.reporting.domain.Event), true)).Category, true, false), Product, staticinvoke(class org.apache.spark.unsafe.types.UTF8String, StringType, fromString, assertnotnull(lambdavariable(MapObjects_loopValue1, MapObjects_loopIsNull1, ObjectType(class com.bauxite.reporting.domain.Event), true)).Product, true, false), UserId, staticinvoke(class org.apache.spark.unsafe.types.UTF8String, StringType, fromString, assertnotnull(lambdavariable(MapObjects_loopValue1, MapObjects_loopIsNull1, ObjectType(class com.bauxite.reporting.domain.Event), true)).UserId, true, false), EventTime, staticinvoke(class org.apache.spark.unsafe.types.UTF8String, StringType, fromString, assertnotnull(lambdavariable(MapObjects_loopValue1, MapObjects_loopIsNull1, ObjectType(class com.bauxite.reporting.domain.Event), true)).EventTime, true, false), EventType, staticinvoke(class org.apache.spark.unsafe.types.UTF8String, StringType, fromString, assertnotnull(lambdavariable(MapObjects_loopValue1, MapObjects_loopIsNull1, ObjectType(class com.bauxite.reporting.domain.Event), true)).EventType, true, false)), assertnotnull(lambdavariable(MapObjects_loopValue0, MapObjects_loopIsNull0, ObjectType(class com.bauxite.reporting.sessinizer.SessionAggregationBufferItem), true)).events, None), sessionStartTs, assertnotnull(lambdavariable(MapObjects_loopValue0, MapObjects_loopIsNull0, ObjectType(class com.bauxite.reporting.sessinizer.SessionAggregationBufferItem), true)).sessionStartTs, sessionEndTs, assertnotnull(lambdavariable(MapObjects_loopValue0, MapObjects_loopIsNull0, ObjectType(class com.bauxite.reporting.sessinizer.SessionAggregationBufferItem), true)).sessionEndTs), assertnotnull(input[0, scala.collection.immutable.List, true]), None) AS value#30, mapobjects(MapObjects_loopValue3, MapObjects_loopIsNull3, StructField(events,ArrayType(StructType(StructField(Category,StringType,true), StructField(Product,StringType,true), StructField(UserId,StringType,true), StructField(EventTime,StringType,true), StructField(EventType,StringType,true)),true),true), StructField(sessionStartTs,LongType,false), StructField(sessionEndTs,LongType,false), if (isnull(lambdavariable(MapObjects_loopValue3, MapObjects_loopIsNull3, StructField(events,ArrayType(StructType(StructField(Category,StringType,true), StructField(Product,StringType,true), StructField(UserId,StringType,true), StructField(EventTime,StringType,true), StructField(EventType,StringType,true)),true),true), StructField(sessionStartTs,LongType,false), StructField(sessionEndTs,LongType,false), true))) null else newInstance(class com.bauxite.reporting.sessinizer.SessionAggregationBufferItem), input[0, array<struct<events:array<struct<Category:string,Product:string,UserId:string,EventTime:string,EventType:string>>,sessionStartTs:bigint,sessionEndTs:bigint>>, false], Some(class scala.collection.immutable.List)), mapobjects(MapObjects_loopValue2, MapObjects_loopIsNull2, ObjectType(class com.bauxite.reporting.domain.EventWithSessionInfo), if (isnull(lambdavariable(MapObjects_loopValue2, MapObjects_loopIsNull2, ObjectType(class com.bauxite.reporting.domain.EventWithSessionInfo), true))) null else named_struct(Category, staticinvoke(class org.apache.spark.unsafe.types.UTF8String, StringType, fromString, assertnotnull(lambdavariable(MapObjects_loopValue2, MapObjects_loopIsNull2, ObjectType(class com.bauxite.reporting.domain.EventWithSessionInfo), true)).Category, true, false), Product, staticinvoke(class org.apache.spark.unsafe.types.UTF8String, StringType, fromString, assertnotnull(lambdavariable(MapObjects_loopValue2, MapObjects_loopIsNull2, ObjectType(class com.bauxite.reporting.domain.EventWithSessionInfo), true)).Product, true, false), UserId, staticinvoke(class org.apache.spark.unsafe.types.UTF8String, StringType, fromString, assertnotnull(lambdavariable(MapObjects_loopValue2, MapObjects_loopIsNull2, ObjectType(class com.bauxite.reporting.domain.EventWithSessionInfo), true)).UserId, true, false), EventTime, staticinvoke(class org.apache.spark.unsafe.types.UTF8String, StringType, fromString, assertnotnull(lambdavariable(MapObjects_loopValue2, MapObjects_loopIsNull2, ObjectType(class com.bauxite.reporting.domain.EventWithSessionInfo), true)).EventTime, true, false), EventType, staticinvoke(class org.apache.spark.unsafe.types.UTF8String, StringType, fromString, assertnotnull(lambdavariable(MapObjects_loopValue2, MapObjects_loopIsNull2, ObjectType(class com.bauxite.reporting.domain.EventWithSessionInfo), true)).EventType, true, false), SessionId, staticinvoke(class org.apache.spark.unsafe.types.UTF8String, StringType, fromString, assertnotnull(lambdavariable(MapObjects_loopValue2, MapObjects_loopIsNull2, ObjectType(class com.bauxite.reporting.domain.EventWithSessionInfo), true)).SessionId, true, false), SessionStartTs, staticinvoke(class org.apache.spark.unsafe.types.UTF8String, StringType, fromString, assertnotnull(lambdavariable(MapObjects_loopValue2, MapObjects_loopIsNull2, ObjectType(class com.bauxite.reporting.domain.EventWithSessionInfo), true)).SessionStartTs, true, false), SessionEndTs, staticinvoke(class org.apache.spark.unsafe.types.UTF8String, StringType, fromString, assertnotnull(lambdavariable(MapObjects_loopValue2, MapObjects_loopIsNull2, ObjectType(class com.bauxite.reporting.domain.EventWithSessionInfo), true)).SessionEndTs, true, false)), assertnotnull(input[0, scala.collection.immutable.List, true]), None) AS value#29, StructField(value,ArrayType(StructType(StructField(Category,StringType,true), StructField(Product,StringType,true), StructField(UserId,StringType,true), StructField(EventTime,StringType,true), StructField(EventType,StringType,true), StructField(SessionId,StringType,true), StructField(SessionStartTs,StringType,true), StructField(SessionEndTs,StringType,true)),true),false), true, 0, 0)])
         +- Exchange hashpartitioning(_1#36, _2#37, 200)
            +- ObjectHashAggregate(keys=[_1#36, _2#37], functions=[partial_eventsessionaggregator(com.bauxite.reporting.sessinizer.EventSessionAggregator@3a44993c, Some(newInstance(class com.bauxite.reporting.domain.Event)), Some(class com.bauxite.reporting.domain.Event), Some(StructType(StructField(Category,StringType,true), StructField(Product,StringType,true), StructField(UserId,StringType,true), StructField(EventTime,StringType,true), StructField(EventType,StringType,true))), mapobjects(MapObjects_loopValue0, MapObjects_loopIsNull0, ObjectType(class com.bauxite.reporting.sessinizer.SessionAggregationBufferItem), if (isnull(lambdavariable(MapObjects_loopValue0, MapObjects_loopIsNull0, ObjectType(class com.bauxite.reporting.sessinizer.SessionAggregationBufferItem), true))) null else named_struct(events, mapobjects(MapObjects_loopValue1, MapObjects_loopIsNull1, ObjectType(class com.bauxite.reporting.domain.Event), if (isnull(lambdavariable(MapObjects_loopValue1, MapObjects_loopIsNull1, ObjectType(class com.bauxite.reporting.domain.Event), true))) null else named_struct(Category, staticinvoke(class org.apache.spark.unsafe.types.UTF8String, StringType, fromString, assertnotnull(lambdavariable(MapObjects_loopValue1, MapObjects_loopIsNull1, ObjectType(class com.bauxite.reporting.domain.Event), true)).Category, true, false), Product, staticinvoke(class org.apache.spark.unsafe.types.UTF8String, StringType, fromString, assertnotnull(lambdavariable(MapObjects_loopValue1, MapObjects_loopIsNull1, ObjectType(class com.bauxite.reporting.domain.Event), true)).Product, true, false), UserId, staticinvoke(class org.apache.spark.unsafe.types.UTF8String, StringType, fromString, assertnotnull(lambdavariable(MapObjects_loopValue1, MapObjects_loopIsNull1, ObjectType(class com.bauxite.reporting.domain.Event), true)).UserId, true, false), EventTime, staticinvoke(class org.apache.spark.unsafe.types.UTF8String, StringType, fromString, assertnotnull(lambdavariable(MapObjects_loopValue1, MapObjects_loopIsNull1, ObjectType(class com.bauxite.reporting.domain.Event), true)).EventTime, true, false), EventType, staticinvoke(class org.apache.spark.unsafe.types.UTF8String, StringType, fromString, assertnotnull(lambdavariable(MapObjects_loopValue1, MapObjects_loopIsNull1, ObjectType(class com.bauxite.reporting.domain.Event), true)).EventType, true, false)), assertnotnull(lambdavariable(MapObjects_loopValue0, MapObjects_loopIsNull0, ObjectType(class com.bauxite.reporting.sessinizer.SessionAggregationBufferItem), true)).events, None), sessionStartTs, assertnotnull(lambdavariable(MapObjects_loopValue0, MapObjects_loopIsNull0, ObjectType(class com.bauxite.reporting.sessinizer.SessionAggregationBufferItem), true)).sessionStartTs, sessionEndTs, assertnotnull(lambdavariable(MapObjects_loopValue0, MapObjects_loopIsNull0, ObjectType(class com.bauxite.reporting.sessinizer.SessionAggregationBufferItem), true)).sessionEndTs), assertnotnull(input[0, scala.collection.immutable.List, true]), None) AS value#30, mapobjects(MapObjects_loopValue3, MapObjects_loopIsNull3, StructField(events,ArrayType(StructType(StructField(Category,StringType,true), StructField(Product,StringType,true), StructField(UserId,StringType,true), StructField(EventTime,StringType,true), StructField(EventType,StringType,true)),true),true), StructField(sessionStartTs,LongType,false), StructField(sessionEndTs,LongType,false), if (isnull(lambdavariable(MapObjects_loopValue3, MapObjects_loopIsNull3, StructField(events,ArrayType(StructType(StructField(Category,StringType,true), StructField(Product,StringType,true), StructField(UserId,StringType,true), StructField(EventTime,StringType,true), StructField(EventType,StringType,true)),true),true), StructField(sessionStartTs,LongType,false), StructField(sessionEndTs,LongType,false), true))) null else newInstance(class com.bauxite.reporting.sessinizer.SessionAggregationBufferItem), input[0, array<struct<events:array<struct<Category:string,Product:string,UserId:string,EventTime:string,EventType:string>>,sessionStartTs:bigint,sessionEndTs:bigint>>, false], Some(class scala.collection.immutable.List)), mapobjects(MapObjects_loopValue2, MapObjects_loopIsNull2, ObjectType(class com.bauxite.reporting.domain.EventWithSessionInfo), if (isnull(lambdavariable(MapObjects_loopValue2, MapObjects_loopIsNull2, ObjectType(class com.bauxite.reporting.domain.EventWithSessionInfo), true))) null else named_struct(Category, staticinvoke(class org.apache.spark.unsafe.types.UTF8String, StringType, fromString, assertnotnull(lambdavariable(MapObjects_loopValue2, MapObjects_loopIsNull2, ObjectType(class com.bauxite.reporting.domain.EventWithSessionInfo), true)).Category, true, false), Product, staticinvoke(class org.apache.spark.unsafe.types.UTF8String, StringType, fromString, assertnotnull(lambdavariable(MapObjects_loopValue2, MapObjects_loopIsNull2, ObjectType(class com.bauxite.reporting.domain.EventWithSessionInfo), true)).Product, true, false), UserId, staticinvoke(class org.apache.spark.unsafe.types.UTF8String, StringType, fromString, assertnotnull(lambdavariable(MapObjects_loopValue2, MapObjects_loopIsNull2, ObjectType(class com.bauxite.reporting.domain.EventWithSessionInfo), true)).UserId, true, false), EventTime, staticinvoke(class org.apache.spark.unsafe.types.UTF8String, StringType, fromString, assertnotnull(lambdavariable(MapObjects_loopValue2, MapObjects_loopIsNull2, ObjectType(class com.bauxite.reporting.domain.EventWithSessionInfo), true)).EventTime, true, false), EventType, staticinvoke(class org.apache.spark.unsafe.types.UTF8String, StringType, fromString, assertnotnull(lambdavariable(MapObjects_loopValue2, MapObjects_loopIsNull2, ObjectType(class com.bauxite.reporting.domain.EventWithSessionInfo), true)).EventType, true, false), SessionId, staticinvoke(class org.apache.spark.unsafe.types.UTF8String, StringType, fromString, assertnotnull(lambdavariable(MapObjects_loopValue2, MapObjects_loopIsNull2, ObjectType(class com.bauxite.reporting.domain.EventWithSessionInfo), true)).SessionId, true, false), SessionStartTs, staticinvoke(class org.apache.spark.unsafe.types.UTF8String, StringType, fromString, assertnotnull(lambdavariable(MapObjects_loopValue2, MapObjects_loopIsNull2, ObjectType(class com.bauxite.reporting.domain.EventWithSessionInfo), true)).SessionStartTs, true, false), SessionEndTs, staticinvoke(class org.apache.spark.unsafe.types.UTF8String, StringType, fromString, assertnotnull(lambdavariable(MapObjects_loopValue2, MapObjects_loopIsNull2, ObjectType(class com.bauxite.reporting.domain.EventWithSessionInfo), true)).SessionEndTs, true, false)), assertnotnull(input[0, scala.collection.immutable.List, true]), None) AS value#29, StructField(value,ArrayType(StructType(StructField(Category,StringType,true), StructField(Product,StringType,true), StructField(UserId,StringType,true), StructField(EventTime,StringType,true), StructField(EventType,StringType,true), StructField(SessionId,StringType,true), StructField(SessionStartTs,StringType,true), StructField(SessionEndTs,StringType,true)),true),false), true, 0, 0)])
               +- AppendColumnsWithObject com.bauxite.reporting.sessinizer.EventSessionizer$$$Lambda$1213/0x0000000800ab5840@7c50709a, [staticinvoke(class org.apache.spark.unsafe.types.UTF8String, StringType, fromString, assertnotnull(input[0, com.bauxite.reporting.domain.Event, true]).Category, true, false) AS Category#22, staticinvoke(class org.apache.spark.unsafe.types.UTF8String, StringType, fromString, assertnotnull(input[0, com.bauxite.reporting.domain.Event, true]).Product, true, false) AS Product#23, staticinvoke(class org.apache.spark.unsafe.types.UTF8String, StringType, fromString, assertnotnull(input[0, com.bauxite.reporting.domain.Event, true]).UserId, true, false) AS UserId#24, staticinvoke(class org.apache.spark.unsafe.types.UTF8String, StringType, fromString, assertnotnull(input[0, com.bauxite.reporting.domain.Event, true]).EventTime, true, false) AS EventTime#25, staticinvoke(class org.apache.spark.unsafe.types.UTF8String, StringType, fromString, assertnotnull(input[0, com.bauxite.reporting.domain.Event, true]).EventType, true, false) AS EventType#26], [staticinvoke(class org.apache.spark.unsafe.types.UTF8String, StringType, fromString, assertnotnull(input[0, scala.Tuple2, true])._1, true, false) AS _1#36, staticinvoke(class org.apache.spark.unsafe.types.UTF8String, StringType, fromString, assertnotnull(input[0, scala.Tuple2, true])._2, true, false) AS _2#37]
                  +- MapElements com.bauxite.reporting.sessinizer.EventSessionizerTest$$Lambda$1077/0x0000000800a35840@af007d6, obj#21: com.bauxite.reporting.domain.Event
                     +- DeserializeToObject createexternalrow(category#5.toString, product#6.toString, user_id#7.toString, event_time#8.toString, event_type#9.toString, StructField(category,StringType,false), StructField(product,StringType,false), StructField(user_id,StringType,false), StructField(event_time,StringType,false), StructField(event_type,StringType,false)), obj#20: org.apache.spark.sql.Row
                        +- Scan ExistingRDD[category#5,product#6,user_id#7,event_time#8,event_type#9]

